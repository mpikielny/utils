package $targetClass.packageName();

import com.slimgears.util.autovalue.annotations.PropertyMeta;

#parse("type-params.java.vm")

$imports

@$[javax.annotation.Generated]("$processor")
@$[com.google.auto.value.AutoValue]
public abstract class $targetClass.simpleName()#typeParamsDeclaration($sourceClass) ##
implements $[$sourceClass], ##
#if ($hasKey)##
        $[com.slimgears.util.autovalue.annotations.HasMetaClassWithKey]<$[$keyProperty.type().asBoxed()], $targetClass.simpleName()#typeParams($sourceClass), ${targetClass.simpleName()}.Builder#typeParams($sourceClass)> ##
#else##
        $[com.slimgears.util.autovalue.annotations.HasMetaClass]<$targetClass.simpleName()#typeParams($sourceClass), ${targetClass.simpleName()}.Builder#typeParams($sourceClass)> ##
#end##
{
    public static final Meta metaClass = new Meta();

    public static class Meta#typeParamsDeclaration($sourceClass) implements ##
#if ($hasKey)##
        $[com.slimgears.util.autovalue.annotations.MetaClassWithKey]<##
        $[$keyProperty.type().asBoxed()], ##
        $targetClass.simpleName()#typeParams($sourceClass), ##
        ${targetClass.simpleName()}.Builder#typeParams($sourceClass)>##
#else##
        $[com.slimgears.util.autovalue.annotations.MetaClass]<##
        $targetClass.simpleName()#typeParams($sourceClass), ##
        ${targetClass.simpleName()}.Builder#typeParams($sourceClass)>##
#end {
        private final $[java.util.Map]<String, PropertyMeta<$targetClass.simpleName()#typeParams($sourceClass), Builder#typeParams($sourceClass), ?>> propertyMap = new $[java.util.LinkedHashMap]<>();
#foreach ($p in $properties)
        public final PropertyMeta<$targetClass.simpleName()#typeParams($sourceClass), Builder#typeParams($sourceClass), $[$p.type().asBoxed()]> $p.name() = PropertyMeta.create("$p.name()", new $[com.slimgears.util.reflect.TypeToken]<$[$p.type().asBoxed()]>(){}, ${targetClass.simpleName()}::$p.name(), Builder::$p.name());
#end

#if ($hasKey)
        @Override
        public PropertyMeta<$targetClass.simpleName()#typeParams($sourceClass), Builder#typeParams($sourceClass), $[$keyProperty.type().asBoxed()]> keyProperty() {
            return $keyProperty.name();
        }
#end

        Meta() {
#foreach ($p in $properties)
            propertyMap.put("$p.name()", $p.name());
#end
        }

        @Override
        public $[com.slimgears.util.reflect.TypeToken]<Builder#typeParams($sourceClass)> builderClass() {
            return new $[com.slimgears.util.reflect.TypeToken]<Builder#typeParams($sourceClass)>(){};
        }

        @Override
        public $[com.slimgears.util.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)> objectClass() {
            return new $[com.slimgears.util.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)>(){};
        }

        @Override
        public Iterable<PropertyMeta<${targetClass.simpleName()}#typeParams($sourceClass), Builder#typeParams($sourceClass), ?>> properties() {
            return propertyMap.values();
        }

        @Override
        public <__V> PropertyMeta<${targetClass.simpleName()}#typeParams($sourceClass), Builder#typeParams($sourceClass), __V> getProperty(String name) {
            //noinspection unchecked
            return (PropertyMeta<${targetClass.simpleName()}#typeParams($sourceClass), Builder#typeParams($sourceClass), __V>)propertyMap.get(name);
        }

        @Override
        public Builder#typeParams($sourceClass) createBuilder() {
           return ${targetClass.simpleName()}.builder();
        }
    }

    @$[com.fasterxml.jackson.annotation.JsonIgnore]
    public abstract Builder#typeParams($sourceClass) toBuilder();

    @$[com.fasterxml.jackson.annotation.JsonIgnore]
    @Override
#if ($hasKey)
    public $[com.slimgears.util.autovalue.annotations.MetaClassWithKey]<$[$keyProperty.type().asBoxed()], $targetClass.simpleName()#typeParams($sourceClass), ${targetClass.simpleName()}.Builder#typeParams($sourceClass)> metaClass() {
#else
    public $[com.slimgears.util.autovalue.annotations.MetaClass]<$targetClass.simpleName()#typeParams($sourceClass), ${targetClass.simpleName()}.Builder#typeParams($sourceClass)> metaClass() {
#end
#if ($sourceClass.typeParams().isEmpty())
        return metaClass;
#else
        return new Meta<>();
#end
    }

    public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) builder() {
        return Builder.create();
    }

    @$[com.fasterxml.jackson.annotation.JsonCreator]
    public static #typeParamsDeclaration($sourceClass) $targetClass.simpleName()#typeParams($sourceClass) create(
#foreach($p in $properties)
        @$[com.fasterxml.jackson.annotation.JsonProperty]("$p.name()") $[$p.type()] $p.name()##
    #if ($foreach.hasNext),##
##

##
    #end##
#end) {
        return ${targetClass.simpleName()}.#typeParams($sourceClass)builder()
#foreach($p in $properties)
            .${p.name()}($p.name())##
##

#end
            .build();
    }

#foreach ($p in $properties)
    @Override##
    #foreach ($a in $p.annotations())##
##

    $a.asString()##
    #end##
##

    public abstract $[$p.type()] $p.getterName()();

#end

    @$[com.google.auto.value.AutoValue].Builder
    public interface Builder#typeParamsDeclaration($sourceClass) extends ##
        $[com.slimgears.util.autovalue.annotations.BuilderPrototype]<$targetClass.simpleName()#typeParams($sourceClass), ##
        Builder#typeParams($sourceClass)>, ##
        $[${sourceClass.erasureName()}Builder]<##
        #foreach ($tp in $sourceClass.typeParams())##
            $[$tp.type()], ##
        #end##
        Builder#typeParams($sourceClass)> ##
        {
        public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) create() {
            return new AutoValue_${targetClass.simpleName()}.Builder#if ($sourceClass.hasTypeParams())<>#end();
        }
#foreach ($p in $properties)##
##

        @Override##
    #foreach ($a in $p.annotations())##
        #if ($a.type().simpleName() != "Nullable")##
##

        $a.asString()##
        #end##
    #end##
##

        Builder#typeParams($sourceClass) ${p.setterName()}($[$p.type()] $p.name());##
    #if ($p.hasBuilder() && !$p.isOptional())##
##

        $[$p.builderType()] ${p.name()}Builder();##

##
    #end##
    #if ($foreach.hasNext)##

##
    #end##
#end

    }
}
