package $targetClass.packageName();

#parse("type-params.java.vm")

$imports

@$[javax.annotation.Generated]("$processor")
@$[com.google.auto.value.AutoValue]
@$[com.fasterxml.jackson.databind.annotation.JsonDeserialize](builder = ${targetClass.simpleName()}.Builder.class)
@$[com.fasterxml.jackson.databind.annotation.JsonSerialize](as = ${targetClass.simpleName()}.class)
public abstract class $targetClass.simpleName()#typeParams($sourceClass) ##
implements ##
#foreach ($iface in $interfaces)##
    $[$iface]##
    #if ($foreach.hasNext), #end##
#end ##
{
    public abstract Builder#typeParams($sourceClass) toBuilder();

    public static #typeParams($sourceClass) Builder#typeParams($sourceClass) builder() {
        return Builder.create();
    }

    @$[com.google.auto.value.AutoValue].Builder
    public interface Builder#typeParams($sourceClass) extends ##
        $[com.slimgears.util.autovalue.annotations.BuilderPrototype]<$targetClass.simpleName()#typeParams($sourceClass)##
        , Builder#typeParams($sourceClass)>##
        #foreach ($iface in $interfaces)##
        , $[${iface.packageName()}.${iface.simpleName()}Builder]<##
            #foreach ($p in $iface.typeParams())##
                $[$p.type()], ##
            #end##
            Builder#typeParams($sourceClass)>##
        #end ##
        {
        @$[com.fasterxml.jackson.annotation.JsonCreator]
        public static #typeParams($sourceClass) Builder#typeParams($sourceClass) create() {
            return new AutoValue_${targetClass.simpleName()}.Builder#if ($sourceClass.hasTypeParams())<>#end();
        }
    }
}
