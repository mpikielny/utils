package $targetClass.packageName();

#parse("type-params.java.vm")

$imports

@$[javax.annotation.Generated]("$processor")
@$[com.google.auto.value.AutoValue]
@$[com.fasterxml.jackson.databind.annotation.JsonDeserialize](builder = ${targetClass.simpleName()}.Builder.class)
@$[com.fasterxml.jackson.databind.annotation.JsonSerialize](as = ${targetClass.simpleName()}.class)
public abstract class $targetClass.simpleName()#typeParamsDeclaration($sourceClass) ##
implements $[$sourceClass] ##
{
    @$[com.fasterxml.jackson.annotation.JsonIgnore]
    public abstract Builder#typeParams($sourceClass) toBuilder();

    public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) builder() {
        return Builder.create();
    }

#foreach ($p in $properties)
    @Override##
    #foreach ($a in $p.annotations())##
##

    $a.asString()##
    #end##
##

    public abstract $[$p.type()] $p.name()();

#end

    @$[com.google.auto.value.AutoValue].Builder
    public interface Builder#typeParamsDeclaration($sourceClass) extends ##
        $[com.slimgears.util.autovalue.annotations.BuilderPrototype]<$targetClass.simpleName()#typeParams($sourceClass), ##
        Builder#typeParams($sourceClass)>, ##
        $[${sourceClass.erasureName()}Builder]<##
        #foreach ($tp in $sourceClass.typeParams())##
            $[$tp.type()], ##
        #end##
        Builder#typeParams($sourceClass)> ##
        {
        @$[com.fasterxml.jackson.annotation.JsonCreator]
        public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) create() {
            return new AutoValue_${targetClass.simpleName()}.Builder#if ($sourceClass.hasTypeParams())<>#end();
        }
#foreach ($p in $properties)##
##

        @Override##
    #foreach ($a in $p.annotations())##
        #if ($a.type().simpleName() != "Nullable")##
##

        $a.asString()##
        #end##
    #end##
##

        Builder#typeParams($sourceClass) ${p.setterName()}($[$p.type()] $p.name());##
    #if ($p.hasBuilder())##
##

       $[$p.builderType()] ${p.name()}Builder();##

##
    #end##
    #if ($foreach.hasNext)##

##
    #end##
#end

    }
}
