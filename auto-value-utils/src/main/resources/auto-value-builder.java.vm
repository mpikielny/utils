package $targetClass.packageName();

$imports

@$[javax.annotation.Generated]("$processor")
public interface $targetClass.simpleName()<##
#foreach ($tp in $sourceClass.typeParams())##
    $tp.type(), ##
#end##
_B extends $targetClass.simpleName()<##
#foreach ($tp in $sourceClass.typeParams())##
    $tp.type(), ##
#end##
_B>> ##
#if (!$interfaces.empty || $hasOwnBuilder)##
extends ##
    #foreach ($iface in $interfaces)##
        $[${iface.erasureName()}Builder]<##
        #foreach ($tp in $iface.typeParams())##
            $tp.type(), ##
        #end##
        _B>##
        #if ($foreach.hasNext || $hasOwnBuilder), #end##
    #end##
#end##
#if ($hasOwnBuilder)##
    $[$ownBuilder.erasureName()]<##
    #foreach ($tp in $sourceClass.typeParams())##
        $tp.type(), ##
    #end##
    _B>##
#end ##
{
#foreach ($p in $properties)##
    #foreach ($a in $p.annotations())##
        #if ($a.type().simpleName() != "Nullable")##
##

    $a.asString()##
        #end##
    #end##
##

    _B ${p.name()}($[$p.type()] $p.name());
    #if ($p.hasBuilder())##
##

    $[$p.builderType()] ${p.name()}Builder();
    #end##
    #foreach ($bm in $p.builderMethods())##
##

    default _B $p.name()${utils.capitalize($bm.name())}(##
        #foreach ($bmarg in $bm.params())##
            #if (!$foreach.hasNext && $bmarg.type().isArray())##
            $[$bmarg.type().elementTypeOrSelf()]... ##
            #else##
            $[$bmarg.type()] ##
            #end##
            $bmarg.name()##
            #if ($foreach.hasNext), #end##
        #end) {##
##

        ${p.name()}Builder().$bm.name()(##
        #foreach ($bmarg in $bm.params())##
           $bmarg.name()##
           #if ($foreach.hasNext), #end##
        #end); ##
##

        return (_B)this;
    }

##
    #end##

#if ($foreach.hasNext)

#end
#end
}
