#parse("macros.vm")

    @Override
    #annotateNonPropertyMethod($context)

#if ($hasKey)
    public $[com.slimgears.util.autovalue.annotations.MetaClassWithKey]<$[$keyProperty.type().asBoxed()], $targetClass.simpleName()#typeParams($sourceClass)> metaClass() {
#else
    public $[com.slimgears.util.autovalue.annotations.MetaClass]<$targetClass.simpleName()#typeParams($sourceClass)> metaClass() {
#end
#if ($sourceClass.typeParams().isEmpty())
        return metaClass;
#else
#if ($hasKey)
        return ($[com.slimgears.util.autovalue.annotations.MetaClassWithKey]<$[$keyProperty.type().asBoxed()], $targetClass.simpleName()#typeParams($sourceClass)>)metaClass;
#else
        return ($[com.slimgears.util.autovalue.annotations.MetaClass]<$targetClass.simpleName()#typeParams($sourceClass)>)metaClass;
#end
#end
    }

    public static final Meta metaClass = new Meta();
    public static class Meta#typeParamsDeclaration($sourceClass) implements ##
#if ($hasKey)##
        $[com.slimgears.util.autovalue.annotations.MetaClassWithKey]<##
        $[$keyProperty.type().asBoxed()], ##
        $targetClass.simpleName()#typeParams($sourceClass)>##
#else##
        $[com.slimgears.util.autovalue.annotations.MetaClass]<##
        $targetClass.simpleName()#typeParams($sourceClass)>##
#end {
        private final $[com.slimgears.util.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)> objectClass = new $[com.slimgears.util.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)>(){};
        private final $[com.slimgears.util.reflect.TypeToken]<Builder#typeParams($sourceClass)> builderClass = new $[com.slimgears.util.reflect.TypeToken]<Builder#typeParams($sourceClass)>(){};
        private final $[java.util.Map]<String, $[com.slimgears.util.autovalue.annotations.PropertyMeta]<$targetClass.simpleName()#typeParams($sourceClass), ?>> propertyMap = new $[java.util.LinkedHashMap]<>();

#foreach ($p in $properties)
        public final $[com.slimgears.util.autovalue.annotations.PropertyMeta]<$targetClass.simpleName()#typeParams($sourceClass), $[$p.type().asBoxed()]> $p.safeName() = PropertyMeta.<$targetClass.simpleName()#typeParams($sourceClass), $[$p.type().asBoxed()], Builder#typeParams($sourceClass)>create(this, "$p.name()", new $[com.slimgears.util.reflect.TypeToken]<$[$p.type().asBoxed()]>(){}, obj -> obj.${p.getterName()}(), Builder::$p.setterName()#if ($p.name() != $p.getterName()), "$p.getterName()"#end);
#end

#if ($hasKey)
        @Override
        public $[com.slimgears.util.autovalue.annotations.PropertyMeta]<$targetClass.simpleName()#typeParams($sourceClass), $[$keyProperty.type().asBoxed()]> keyProperty() {
            return $keyProperty.safeName();
        }
#end

        Meta() {
#foreach ($p in $properties)
            propertyMap.put("$p.name()", $p.safeName());
#end
        }

        @Override
        public $[com.slimgears.util.reflect.TypeToken]<Builder#typeParams($sourceClass)> builderClass() {
            return this.builderClass;
        }

        @Override
        public $[com.slimgears.util.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)> objectClass() {
            return this.objectClass;
        }

        @Override
        public Iterable<$[com.slimgears.util.autovalue.annotations.PropertyMeta]<${targetClass.simpleName()}#typeParams($sourceClass), ?>> properties() {
            return propertyMap.values();
        }

        @Override
        @$[java.lang.SuppressWarnings]("unchecked")
        public <__V> $[com.slimgears.util.autovalue.annotations.PropertyMeta]<${targetClass.simpleName()}#typeParams($sourceClass), __V> getProperty(String name) {
            return (PropertyMeta<${targetClass.simpleName()}#typeParams($sourceClass), __V>)propertyMap.get(name);
        }

        @Override
        public <B extends $[com.slimgears.util.autovalue.annotations.MetaBuilder]<${targetClass.simpleName()}#typeParams($sourceClass)>> B createBuilder() {
            return (B)(BuilderPrototype)${targetClass.simpleName()}.builder();
        }

        @Override
        public int hashCode() {
            return $[java.util.Objects].hash(objectClass, builderClass);
        }

        @Override
        public boolean equals(Object obj) {
            return obj instanceof Meta
            && Objects.equals(((Meta)obj).objectClass(), objectClass())
            && Objects.equals(((Meta)obj).builderClass(), builderClass());
        }
    }
