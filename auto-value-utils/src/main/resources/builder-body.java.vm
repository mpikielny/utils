#parse("macros.vm")

    #annotateCreator($context)

    public static #typeParamsDeclaration($sourceClass) $targetClass.simpleName()#typeParams($sourceClass) create(##
#foreach($p in $properties)##

        #annotateCreatorParameter($context, $p) $[$p.type()] $p.safeName()##
    #if ($foreach.hasNext),#end##
#end) {
        return ${targetClass.simpleName()}.#typeParams($sourceClass)builder()
#foreach($p in $properties)
            .${p.setterName()}($p.safeName())##
##

#end
            .build();
    }

#if ($properties.size() > $mandatoryProperties.size())
    public static #typeParamsDeclaration($sourceClass) $targetClass.simpleName()#typeParams($sourceClass) create(##
#foreach($p in $mandatoryProperties)##

        ##
        $[$p.type()] $p.safeName()##
    #if ($foreach.hasNext),#end##
#end) {
        return ${targetClass.simpleName()}.#typeParams($sourceClass)builder()
#foreach($p in $mandatoryProperties)
            .${p.name()}($p.safeName())##
##

#end
            .build();
    }
#end

    #annotateNonPropertyMethod($context)

    public abstract Builder#typeParams($sourceClass) toBuilder();

    public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) builder() {
        return Builder.create();
    }

    #annotateBuilderClass($context)

    public interface Builder#typeParamsDeclaration($sourceClass) extends ##
            $[com.slimgears.util.autovalue.annotations.BuilderPrototype]<$targetClass.simpleName()#typeParams($sourceClass), ##
            Builder#typeParams($sourceClass)>, ##
            $[${sourceClass.erasureName()}Builder]<##
#foreach ($tp in $sourceClass.typeParams())##
            $[$tp.type()], ##
#end##
            Builder#typeParams($sourceClass)> {##

        public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) create() {
            return new AutoValue_${targetClass.simpleName()}.Builder#if ($sourceClass.hasTypeParams())<>#end();
        }
#foreach ($p in $properties)##
##

        @Override##
    #foreach ($a in $p.annotations())##
        #if ($a.type().simpleName() != "Nullable")##
##

        $a.asString()##
        #end##
    #end##
##

        Builder#typeParams($sourceClass) ${p.setterName()}($[$p.type()] $p.safeName());##
    #if ($p.hasBuilder() && !$p.isOptional())##
##

            $[$p.builderType()] ${p.name()}Builder();##

##
    #end##
    #if ($foreach.hasNext)##

##
    #end##
#end

    }
#if ($allOptional)
#foreach ($p in $properties)

    public static #typeParamsDeclaration($sourceClass) $targetClass.simpleName()#typeParams($sourceClass) from${p.capitalizedName()}($[$p.type()] $p.safeName()) {
        return ${targetClass.simpleName()}.#typeParams($sourceClass)builder().${p.setterName()}($p.safeName()).build();
    }
#end
#end
